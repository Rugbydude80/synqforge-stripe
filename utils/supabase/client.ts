import { createBrowserClient } from '@supabase/ssr';
import { isDemoMode } from '@/lib/env';
import type { Database } from '@/types/extended-db';

// Minimal in-memory adapter for Demo Mode (client-side)
let demoDb: {
  clients: any[];
  ingests: any[];
  story_candidates: any[];
  stories: any[];
} | null = null;

function ensureDemoDb() {
  if (!demoDb) {
    demoDb = { clients: [], ingests: [], story_candidates: [], stories: [] };
  }
  return demoDb;
}

function createDemoClient() {
  // Very small subset of Supabase client for this app's usage
  const db = ensureDemoDb();
  const table = (name: keyof typeof db) => ({
    select: async () => ({ data: db[name], error: null }),
    insert: async (records: any | any[]) => {
      const arr = Array.isArray(records) ? records : [records];
      const genId = () => (globalThis.crypto && 'randomUUID' in globalThis.crypto ? (globalThis.crypto as any).randomUUID() : `demo_${Math.random().toString(36).slice(2)}`);
      const withIds = arr.map((r) => ({ id: genId(), created_at: new Date().toISOString(), ...r }));
      db[name].push(...withIds);
      return { data: withIds, error: null };
    },
    update: (patch: any) => ({
      eq: async (col: string, val: any) => {
        const idx = db[name].findIndex((r: any) => r[col] === val);
        if (idx >= 0) db[name][idx] = { ...db[name][idx], ...patch };
        return { data: idx >= 0 ? [db[name][idx]] : [], error: null };
      }
    }),
    delete: () => ({
      eq: async (col: string, val: any) => {
        const before = db[name].length;
        demoDb![name] = db[name].filter((r: any) => r[col] !== val);
        const deleted = before - demoDb![name].length;
        return { data: { deleted }, error: null };
      }
    })
  });
  return {
    from: (t: keyof typeof db) => table(t),
    auth: {
      getUser: async () => ({ data: { user: { id: 'demo-user' } }, error: null })
    }
  } as unknown as ReturnType<typeof createBrowserClient<Database>>;
}
// Use the extended Database type that includes SynqForge tables.  The
// autogenerated `types_db.ts` file does not include our custom tables
// (organisations, projects, stories, etc.), so we import from
// '@/types/extended-db' instead.  If you regenerate types via Supabase
// CLI in the future, you can point back to types_db.ts.
import type { Database } from '@/types/extended-db';

// Define a function to create a Supabase client for client-side operations
export const createClient = () => {
  if (isDemoMode()) return createDemoClient();
  return createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
};
