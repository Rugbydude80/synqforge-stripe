// Extended Supabase database types for SynqForge
//
// This file augments the autogenerated types from `types_db.ts` by adding
// definitions for custom tables used by the SynqForge application.  The
// existing `types_db.ts` file only includes tables from the underlying
// Stripe subscription starter kit and does not know about our new domain
// models (organisations, projects, stories, etc.).  Rather than editing
// the autogenerated file directly (which is UTF‑16 encoded and brittle),
// we define a new `Database` type here that merges the upstream types
// and appends our own table definitions.  You should import this type
// instead of `Database` from `types_db.ts` whenever working with Supabase
// clients in SynqForge.

import type { Database as BaseDatabase } from '../types_db';

/**
 * The extended `Database` type merges the upstream tables with our
 * application‑specific tables.  Each table follows the pattern of the
 * autogenerated types: `Row`, `Insert`, `Update` and an optional
 * `Relationships` array describing foreign keys.  These types enable
 * strong typing on Supabase queries while allowing the rest of the
 * autogenerated definitions to pass through unchanged.
 */
export type Database = Omit<BaseDatabase, 'public'> & {
  public: {
    Tables: BaseDatabase['public']['Tables'] & {
      /** Organisations represent top‑level tenants. */
      organisations: {
        Row: {
          id: string;
          name: string;
          slug: string;
          owner_id: string | null;
          stripe_customer_id: string | null;
          stripe_subscription_id: string | null;
          stripe_metered_item_id: string | null;
          ai_credits: number | null;
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          name: string;
          slug: string;
          owner_id?: string | null;
          stripe_customer_id?: string | null;
          stripe_subscription_id?: string | null;
          stripe_metered_item_id?: string | null;
          ai_credits?: number | null;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          name?: string;
          slug?: string;
          owner_id?: string | null;
          stripe_customer_id?: string | null;
          stripe_subscription_id?: string | null;
          stripe_metered_item_id?: string | null;
          ai_credits?: number | null;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'organisations_owner_id_fkey';
            columns: ['owner_id'];
            referencedRelation: 'users';
            referencedColumns: ['id'];
          },
        ];
      };
      /** Profiles extend Supabase auth users with organisation membership. */
      user_profiles: {
        Row: {
          user_id: string;
          organisation_id: string;
          role: 'owner' | 'editor' | 'viewer';
          created_at: string | null;
        };
        Insert: {
          user_id: string;
          organisation_id: string;
          role?: 'owner' | 'editor' | 'viewer';
          created_at?: string | null;
        };
        Update: {
          user_id?: string;
          organisation_id?: string;
          role?: 'owner' | 'editor' | 'viewer';
          created_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'user_profiles_user_id_fkey';
            columns: ['user_id'];
            referencedRelation: 'users';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'user_profiles_organisation_id_fkey';
            columns: ['organisation_id'];
            referencedRelation: 'organisations';
            referencedColumns: ['id'];
          },
        ];
      };
      /** Projects belong to organisations and group stories. */
      projects: {
        Row: {
          id: string;
          organisation_id: string;
          name: string;
          description: string | null;
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          organisation_id: string;
          name: string;
          description?: string | null;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          organisation_id?: string;
          name?: string;
          description?: string | null;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'projects_organisation_id_fkey';
            columns: ['organisation_id'];
            referencedRelation: 'organisations';
            referencedColumns: ['id'];
          },
        ];
      };
      /** Members link users to projects with a role. */
      project_members: {
        Row: {
          project_id: string;
          user_id: string;
          role: 'owner' | 'editor' | 'viewer';
          created_at: string | null;
        };
        Insert: {
          project_id: string;
          user_id: string;
          role?: 'owner' | 'editor' | 'viewer';
          created_at?: string | null;
        };
        Update: {
          project_id?: string;
          user_id?: string;
          role?: 'owner' | 'editor' | 'viewer';
          created_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'project_members_project_id_fkey';
            columns: ['project_id'];
            referencedRelation: 'projects';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'project_members_user_id_fkey';
            columns: ['user_id'];
            referencedRelation: 'users';
            referencedColumns: ['id'];
          },
        ];
      };
      /** Stories are the core work items in a project. */
      stories: {
        Row: {
          id: string;
          project_id: string;
          title: string;
          description: string | null;
          status: 'backlog' | 'in_progress' | 'review' | 'done';
          assigned_to: string | null;
          priority: number | null;
          ai_generated: boolean | null;
          created_at: string | null;
          updated_at: string | null;
          /** Optional reference to the epic this story belongs to. */
          epic_id: string | null;
          /** Optional reference to the sprint this story is scheduled for. */
          sprint_id: string | null;
        };
        Insert: {
          id?: string;
          project_id: string;
          title: string;
          description?: string | null;
          status?: 'backlog' | 'in_progress' | 'review' | 'done';
          assigned_to?: string | null;
          priority?: number | null;
          ai_generated?: boolean | null;
          created_at?: string | null;
          updated_at?: string | null;
          epic_id?: string | null;
          sprint_id?: string | null;
        };
        Update: {
          id?: string;
          project_id?: string;
          title?: string;
          description?: string | null;
          status?: 'backlog' | 'in_progress' | 'review' | 'done';
          assigned_to?: string | null;
          priority?: number | null;
          ai_generated?: boolean | null;
          created_at?: string | null;
          updated_at?: string | null;
          epic_id?: string | null;
          sprint_id?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'stories_project_id_fkey';
            columns: ['project_id'];
            referencedRelation: 'projects';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'stories_assigned_to_fkey';
            columns: ['assigned_to'];
            referencedRelation: 'users';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'stories_epic_id_fkey';
            columns: ['epic_id'];
            referencedRelation: 'epics';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'stories_sprint_id_fkey';
            columns: ['sprint_id'];
            referencedRelation: 'sprints';
            referencedColumns: ['id'];
          },
        ];
      };

      /** Epics represent collections of related tasks. */
      epics: {
        Row: {
          id: string;
          project_id: string;
          name: string;
          description: string | null;
          status: string;
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          project_id: string;
          name: string;
          description?: string | null;
          status?: string;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          project_id?: string;
          name?: string;
          description?: string | null;
          status?: string;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'epics_project_id_fkey';
            columns: ['project_id'];
            referencedRelation: 'projects';
            referencedColumns: ['id'];
          },
        ];
      };

      /** Sprints organise work into timeboxed iterations. */
      sprints: {
        Row: {
          id: string;
          project_id: string;
          name: string;
          goal: string | null;
          start_date: string;
          end_date: string;
          status: string;
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          project_id: string;
          name: string;
          goal?: string | null;
          start_date: string;
          end_date: string;
          status?: string;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          project_id?: string;
          name?: string;
          goal?: string | null;
          start_date?: string;
          end_date?: string;
          status?: string;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'sprints_project_id_fkey';
            columns: ['project_id'];
            referencedRelation: 'projects';
            referencedColumns: ['id'];
          },
        ];
      };

      /** Retrospectives capture lessons learned after a sprint. */
      retrospectives: {
        Row: {
          id: string;
          sprint_id: string;
          summary: string | null;
          notes: string | null;
          created_at: string | null;
        };
        Insert: {
          id?: string;
          sprint_id: string;
          summary?: string | null;
          notes?: string | null;
          created_at?: string | null;
        };
        Update: {
          id?: string;
          sprint_id?: string;
          summary?: string | null;
          notes?: string | null;
          created_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'retrospectives_sprint_id_fkey';
            columns: ['sprint_id'];
            referencedRelation: 'sprints';
            referencedColumns: ['id'];
          },
        ];
      };
      /** AI operations log each AI call and credit usage. */
      ai_operations: {
        Row: {
          id: string;
          organisation_id: string;
          user_id: string;
          operation_type: string;
          model: string;
          tokens_used: number;
          credits_used: number;
          cached: boolean | null;
          response_time_ms: number | null;
          created_at: string | null;
        };
        Insert: {
          id?: string;
          organisation_id: string;
          user_id: string;
          operation_type: string;
          model: string;
          tokens_used: number;
          credits_used: number;
          cached?: boolean | null;
          response_time_ms?: number | null;
          created_at?: string | null;
        };
        Update: {
          id?: string;
          organisation_id?: string;
          user_id?: string;
          operation_type?: string;
          model?: string;
          tokens_used?: number;
          credits_used?: number;
          cached?: boolean | null;
          response_time_ms?: number | null;
          created_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'ai_operations_organisation_id_fkey';
            columns: ['organisation_id'];
            referencedRelation: 'organisations';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'ai_operations_user_id_fkey';
            columns: ['user_id'];
            referencedRelation: 'users';
            referencedColumns: ['id'];
          },
        ];
      };
      /** Activity logs record all significant events. */
      activity_logs: {
        Row: {
          id: string;
          organisation_id: string;
          project_id: string | null;
          user_id: string;
          entity_type: string;
          entity_id: string;
          action: string;
          changes: Record<string, unknown> | null;
          created_at: string | null;
        };
        Insert: {
          id?: string;
          organisation_id: string;
          project_id?: string | null;
          user_id: string;
          entity_type: string;
          entity_id: string;
          action: string;
          changes?: Record<string, unknown> | null;
          created_at?: string | null;
        };
        Update: {
          id?: string;
          organisation_id?: string;
          project_id?: string | null;
          user_id?: string;
          entity_type?: string;
          entity_id?: string;
          action?: string;
          changes?: Record<string, unknown> | null;
          created_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'activity_logs_organisation_id_fkey';
            columns: ['organisation_id'];
            referencedRelation: 'organisations';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'activity_logs_project_id_fkey';
            columns: ['project_id'];
            referencedRelation: 'projects';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'activity_logs_user_id_fkey';
            columns: ['user_id'];
            referencedRelation: 'users';
            referencedColumns: ['id'];
          },
        ];
      };
    };
    Views: BaseDatabase['public']['Views'];
    Functions: BaseDatabase['public']['Functions'];
    Enums: BaseDatabase['public']['Enums'];
  };
};